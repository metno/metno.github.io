<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>IT.met.no</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2015-08-24T00:00:00+02:00</updated><entry><title>OpenStack Ceilometer basics</title><link href="/posts/2015/08/openstack-ceilometer-basics.html" rel="alternate"></link><updated>2015-08-24T00:00:00+02:00</updated><author><name>morten.hanshaugen@met.no</name></author><id>tag:,2015-08-24:posts/2015/08/openstack-ceilometer-basics.html</id><summary type="html">&lt;div style="float:right;margin:0 10px 10px 0"&gt;
&lt;p&gt;&lt;img alt="The Ceilometer" src="/images/Single_Lens_Ceilometer.JPG" /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Ceilometer - OpenStack Telemetry&lt;/h2&gt;
&lt;p&gt;OpenStack uses Ceilometer to measure Cloud usage.&lt;/p&gt;
&lt;p&gt;Telemetry is nice, as infrastructure utilization gets visible to users, developers, project leaders, management and to the IT department for utilization and budgetary purposes.&lt;/p&gt;
&lt;h3&gt;Telemetry for OpenStack&lt;/h3&gt;
&lt;p&gt;Getting telemetry from OpenStack quickly changed from optimism to frustration. 
OpenStack has all of these really nice APIs you can use to query all kinds of information, but there is no mature project for setting it in a system - and we really do not want to start writing a Cloud accounting system from scratch.&lt;/p&gt;
&lt;h4&gt;Simple start - the API&lt;/h4&gt;
&lt;p&gt;How to utilize the API could be better documented. Let's walk through the basics.&lt;/p&gt;
&lt;p&gt;First we need to get a token:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;. openrc    &lt;span class="c"&gt;# openrc sets a number of useful variables&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$OS_AUTH_URL&lt;/span&gt;
http://localhost:5000/v2.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Get and store the adminURL in the ADMIN_URL variable (using quick and dirty method):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;ADMIN_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;curl -s -X POST &lt;span class="nv"&gt;$OS_AUTH_URL&lt;/span&gt;/tokens -H &lt;span class="s2"&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -d &lt;span class="s1"&gt;&amp;#39;{&amp;quot;auth&amp;quot;: {&amp;quot;tenantName&amp;quot;: &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$OS_TENANT_NAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;, &amp;quot;passwordCredentials&amp;quot;: {&amp;quot;username&amp;quot;: &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$OS_USERNAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;, &amp;quot;password&amp;quot;: &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$OS_PASSWORD&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;}}}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; python -c &lt;span class="s1"&gt;&amp;#39;import sys, json; print json.load(sys.stdin)[&amp;quot;access&amp;quot;][&amp;quot;serviceCatalog&amp;quot;][3][&amp;quot;endpoints&amp;quot;][0][&amp;quot;adminURL&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;v&lt;span class="nv"&gt;$OS_VOLUME_API_VERSION&lt;/span&gt;/
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$ADMIN_URL&lt;/span&gt;
http://localhost:8777/v2/

&lt;span class="nv"&gt;TOKEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;curl -s -X POST &lt;span class="nv"&gt;$OS_AUTH_URL&lt;/span&gt;/tokens -H &lt;span class="s2"&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -d &lt;span class="s1"&gt;&amp;#39;{&amp;quot;auth&amp;quot;: {&amp;quot;tenantName&amp;quot;: &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$OS_TENANT_NAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;, &amp;quot;passwordCredentials&amp;quot;: {&amp;quot;username&amp;quot;: &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$OS_USERNAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;, &amp;quot;password&amp;quot;: &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$OS_PASSWORD&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;}}}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; python -c &lt;span class="s1"&gt;&amp;#39;import sys, json; print json.load(sys.stdin)[&amp;quot;access&amp;quot;][&amp;quot;token&amp;quot;][&amp;quot;id&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$TOKEN&lt;/span&gt;
3df105345ada4460b16ee11c06617cf7
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Please note that the tests below will not output anything useful if you have a newly installed OpenStack/Devstack with no data / instances in the database.&lt;/p&gt;
&lt;p&gt;Run a quick test listing of available meters:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;curl -H X-Auth-Token:&lt;span class="nv"&gt;$TOKEN&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ADMIN_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;meters&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; python -m json.tool&lt;span class="p"&gt;|&lt;/span&gt;grep name&lt;span class="p"&gt;|&lt;/span&gt;head -3
        &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;network.incoming.packets&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;network.outgoing.bytes&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;network.outgoing.packets&amp;quot;&lt;/span&gt;,
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Query the list of instances: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;curl -H X-Auth-Token:&lt;span class="nv"&gt;$TOKEN&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ADMIN_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;meters/instance?q.field=metadata.event_type&amp;amp;q.value=compute.instance.exists&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; python -m json.tool &lt;span class="p"&gt;|&lt;/span&gt; head
&lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;counter_name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;instance&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;counter_type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;gauge&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;counter_unit&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;instance&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;counter_volume&amp;quot;&lt;/span&gt;: 1.0,
        &lt;span class="s2"&gt;&amp;quot;message_id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;132e401a-26e2-11e5-8ca8-fef0e2547b3a&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;project_id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;08b96944c51e45cc847b2a1901ec58c0&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;recorded_at&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;2015-07-10T09:00:13.117000&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;resource_id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;ca3a8684-f406-464d-8ae4-10982613db0e&amp;quot;&lt;/span&gt;,
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Query the list of instances where timestamp is newer than a date: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;curl -X GET -H X-Auth-Token:&lt;span class="nv"&gt;$TOKEN&lt;/span&gt; -H &lt;span class="s2"&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -d &lt;span class="s1"&gt;&amp;#39;{&amp;quot;q&amp;quot;: [{&amp;quot;field&amp;quot;: &amp;quot;timestamp&amp;quot;, &amp;quot;op&amp;quot;: &amp;quot;ge&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;2014-04-01T13:34:17&amp;quot;}]}&amp;#39;&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ADMIN_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;meters/instance &lt;span class="p"&gt;|&lt;/span&gt; python -m json.tool
&amp;lt;the same as above&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A last example to help you along:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;curl -X GET -H X-Auth-Token:&lt;span class="nv"&gt;$TOKEN&lt;/span&gt; -H &lt;span class="s2"&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -d &lt;span class="s1"&gt;&amp;#39;{&amp;quot;q&amp;quot;: [{&amp;quot;field&amp;quot;: &amp;quot;timestamp&amp;quot;, &amp;quot;op&amp;quot;: &amp;quot;ge&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;2014-04-01T13:34:17&amp;quot;}, {&amp;quot;field&amp;quot;: &amp;quot;resource_id&amp;quot;, &amp;quot;op&amp;quot;: &amp;quot;eq&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;82a1371d-a1a3-4f98-9781-8663b262ee7e&amp;quot;}]}&amp;#39;&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ADMIN_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;meters/instance
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See this link for examples of how to use the API:
&lt;a href="http://docs.openstack.org/developer/ceilometer/webapi/v2.html#api-queries"&gt;http://docs.openstack.org/developer/ceilometer/webapi/v2.html#api-queries&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Command line clients&lt;/h4&gt;
&lt;p&gt;See OpenStack command-line clients for detail on how to install command line clients and getting credentials:
&lt;a href="http://docs.openstack.org/api/quick-start/content/index.html#getting-credentials-a00665"&gt;http://docs.openstack.org/api/quick-start/content/index.html#getting-credentials-a00665&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nova image-list
nova flavor-list
etc
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;In need of a Ceilometer project to contribute to&lt;/h3&gt;
&lt;p&gt;We master the basics. How to find an OpenStack Ceilometer project to adapt and contribute to?&lt;/p&gt;</summary><category term="openstack"></category><category term="ceilometer"></category><category term="telemetry"></category><category term="api"></category><category term="devstack"></category><category term="nova"></category><category term="contribute"></category></entry><entry><title>How to Configure Knife and Test Kitchen to use OpenStack</title><link href="/posts/2015/03/configure-knife-and-test-kitchen-to-use-openstack.html" rel="alternate"></link><updated>2015-03-09T00:00:00+01:00</updated><author><name>arne.sund@met.no</name></author><id>tag:,2015-03-09:posts/2015/03/configure-knife-and-test-kitchen-to-use-openstack.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Originally published on &lt;a href="http://arnesund.com/2015/03/01/how-to-configure-knife-and-test-kitchen-to-use-openstack/"&gt;arnesund.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When developing Chef cookbooks, Knife and Test Kitchen (hereafter just "Kitchen") are essential tools in the workflow. Both tools can be set up to use OpenStack to make it easy to create VMs for testing regardless of the capabilities of the workstation used. It's great for testing some new recipe in a cookbook or making sure changes do not break existing cookbook functionality. This post will go through the configuration of both tools to ensure they use OpenStack instead of the default Vagrant drivers.&lt;/p&gt;
&lt;h2&gt;Install software and dependencies&lt;/h2&gt;
&lt;p&gt;First, it is necessary to install the software, plugins and dependencies. Let's start with some basic packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install ruby1.9 git
sudo apt-get install make autoconf gcc g++ zlib1g-dev bundler
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Chef Development Kit&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://docs.chef.io/#chef-dk-title"&gt;Chef Development Kit&lt;/a&gt; is a collection of very useful tools for any cookbook developer. It includes tools like Knife, Kitchen, Berkshelf, Foodcritic, and more. Fetch download links for the current release from the &lt;a href="https://downloads.chef.io/chef-dk/"&gt;Chef-DK download page&lt;/a&gt; and install it, for example like this for Ubuntu:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;wget https://opscode-omnibus-packages.s3.amazonaws.com/ubuntu/12.04/x86_64/chefdk_0.4.0-1_amd64.deb
sudo dpkg -i chefdk_0.4.0-1_amd64.deb
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Kitchen OpenStack driver&lt;/h3&gt;
&lt;p&gt;By default, Kitchen uses Vagrant as the driver to create virtual machines for running tests. To get OpenStack support, install the &lt;a href="https://github.com/test-kitchen/kitchen-openstack"&gt;Kitchen OpenStack driver&lt;/a&gt;. The recommended way of installing it is to add the Ruby gem to the Gemfile in your cookbook and use Bundler to install it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gem &amp;quot;kitchen-openstack&amp;quot;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; Gemfile
sudo bundle
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Knife OpenStack plugin&lt;/h3&gt;
&lt;p&gt;With the &lt;a href="https://github.com/chef/knife-openstack"&gt;OpenStack plugin&lt;/a&gt; Knife is able to create new OpenStack VMs and bootstrap them as nodes on your Chef server. It can also list VMs and delete VMs. Install the plugin with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;gem install knife-openstack
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;OpenStack command line clients&lt;/h3&gt;
&lt;p&gt;The command line clients for OpenStack are very useful for checking values like image IDs, Neutron networks and so on. In addition, they offer one-line access to actions like creating new VMs, allocating new floating IPs and more. Install the clients with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install python-novaclient python-neutronclient python-glanceclient
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Configure Knife to use OpenStack&lt;/h2&gt;
&lt;p&gt;After installing the plugin to get OpenStack support for Knife, you need to append some lines to the Knife config file &lt;code&gt;~/.chef/knife.rb&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cat &amp;gt;&amp;gt; ~/.chef/knife.rb &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF&lt;/span&gt;
&lt;span class="s"&gt;# Knife OpenStack plugin setup&lt;/span&gt;
&lt;span class="s"&gt;knife[:openstack_auth_url] = &amp;quot;#{ENV[&amp;#39;OS_AUTH_URL&amp;#39;]}/tokens&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;knife[:openstack_username] = &amp;quot;#{ENV[&amp;#39;OS_USERNAME&amp;#39;]}&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;knife[:openstack_password] = &amp;quot;#{ENV[&amp;#39;OS_PASSWORD&amp;#39;]}&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;knife[:openstack_tenant] = &amp;quot;#{ENV[&amp;#39;OS_TENANT_NAME&amp;#39;]}&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What these lines do is to instruct Knife to use the contents of environment variables to authenticate with OpenStack when needed. The environment variables are the ones you get when you source the OpenStack RC file of your project. The RC file can be downloaded from the OpenStack web UI (Horizon) by navigating to Access &amp;amp; Security -&amp;gt; API Access -&amp;gt; Download OpenStack RC file. Sourcing the file makes sure the environment variables are part of the current shell environment, and is done like this (for an RC file called &lt;code&gt;openstack-rc.sh&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;. openstack-rc.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With this config in place Knife now has the power to create new OpenStack VMs in your project, list all active VMs and destroy VMs. In addition, it can be used to list available images, flavors and networks in OpenStack. I do however prefer to use the native OpenStack clients (glance, nova, neutron) for that, since they can perform lots of other valuable tasks like creating new networks and so on.&lt;/p&gt;
&lt;p&gt;Below is an example of VM creation with Knife, using some of the required and optional arguments to the command. Issue &lt;code&gt;knife openstack server create --help&lt;/code&gt; to get all available arguments. As a quick summary, the arguments I give Knife are the requested hostname of the server, the flavor (3 = m1.medium in my cluster), image ID of a CentOS 7 image, network ID, SSH key name and the default user account used by the image ("centos").&lt;/p&gt;
&lt;p&gt;With the &lt;code&gt;--openstack-floating-ip&lt;/code&gt; argument I tell Knife to allocate a floating IP to the new server. I could have specified a specific floating IP after that argument, which would have been allocated to the new server whether it was in use before or not. The only requirement is that it must be allocated to my OpenStack project before I try to use it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;knife openstack server create -N &lt;span class="nb"&gt;test&lt;/span&gt;-server -f &lt;span class="m"&gt;3&lt;/span&gt; -I b206baa3-3a80-41cf-9850-49021b8bb3c1 --network-ids df7cc182-8794-4134-b700-1fb8f1fbf070 --openstack-ssh-key-id arnes --ssh-user centos --openstack-floating-ip --no-host-key-verify

Waiting &lt;span class="k"&gt;for&lt;/span&gt; server &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;wait time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 600&lt;span class="o"&gt;]&lt;/span&gt;.........................
Instance ID 13493d82-8dc2-4b1d-87e8-3eeefa8defe2
Name &lt;span class="nb"&gt;test&lt;/span&gt;-server
Flavor 3
Image b206baa3-3a80-41cf-9850-49021b8bb3c1
Keypair arnes
State ACTIVE
Availability Zone nova
Floating IP Address: 10.0.1.242
Bootstrapping the server by using bootstrap_protocol: ssh and image_os_type: linux

Waiting &lt;span class="k"&gt;for&lt;/span&gt; sshd to host &lt;span class="o"&gt;(&lt;/span&gt;10.0.1.242&lt;span class="o"&gt;)&lt;/span&gt;....done
Connecting to 10.0.1.242
10.0.1.242 Installing Chef Client...
10.0.1.242 Downloading Chef &lt;span class="m"&gt;11&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; el...
10.0.1.242 Installing Chef 11
10.0.1.242 Thank you &lt;span class="k"&gt;for&lt;/span&gt; installing Chef!
10.0.1.242 Starting first Chef Client run...
...
10.0.1.242 Running handlers &lt;span class="nb"&gt;complete&lt;/span&gt;
10.0.1.242 Chef Client finished, 0/0 resources updated in 1.328282722 seconds
Instance ID 13493d82-8dc2-4b1d-87e8-3eeefa8defe2
Name &lt;span class="nb"&gt;test&lt;/span&gt;-server
Public IP 10.0.1.242
Flavor 3
Image b206baa3-3a80-41cf-9850-49021b8bb3c1
Keypair arnes
State ACTIVE
Availability Zone nova
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As an added benefit of creating VMs this way, they are automatically bootstrapped as Chef nodes with your Chef server!&lt;/p&gt;
&lt;h2&gt;Configure Kitchen to use OpenStack&lt;/h2&gt;
&lt;p&gt;Kitchen has a config file &lt;code&gt;~/.kitchen/config.yml&lt;/code&gt; where all the config required to use OpenStack should be placed. The config file is "global", meaning it's not part of any cookbook or Chef repository. The advantage of using the global config file is that the Kitchen config in each cookbook is reduced to just one line, which is good since that Kitchen config is commonly committed to the cookbook repository and shared with other developers. Other developers may not have access to the same OpenStack environment as you, so their Kitchen OpenStack config will differ from yours.&lt;/p&gt;
&lt;p&gt;Run the following commands to initialize the necessary config for Kitchen:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir ~/.kitchen
cat &amp;gt;&amp;gt; ~/.kitchen/config.yml &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF&lt;/span&gt;
&lt;span class="s"&gt;---&lt;/span&gt;
&lt;span class="s"&gt;driver:&lt;/span&gt;
&lt;span class="s"&gt; name: openstack&lt;/span&gt;
&lt;span class="s"&gt; openstack_username: &amp;lt;%= ENV[&amp;#39;OS_USERNAME&amp;#39;] %&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt; openstack_api_key: &amp;lt;%= ENV[&amp;#39;OS_PASSWORD&amp;#39;] %&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt; openstack_auth_url: &amp;lt;%= &amp;quot;#{ENV[&amp;#39;OS_AUTH_URL&amp;#39;]}/tokens&amp;quot; %&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt; openstack_tenant: &amp;lt;%= ENV[&amp;#39;OS_TENANT_NAME&amp;#39;] %&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt; require_chef_omnibus: true&lt;/span&gt;
&lt;span class="s"&gt; image_ref: CentOS 7 GC 2014-09-16&lt;/span&gt;
&lt;span class="s"&gt; username: centos&lt;/span&gt;
&lt;span class="s"&gt; flavor_ref: m1.medium&lt;/span&gt;
&lt;span class="s"&gt; key_name: &amp;lt;%= ENV[&amp;#39;OS_USERNAME&amp;#39;] %&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt; floating_ip_pool: public&lt;/span&gt;
&lt;span class="s"&gt; network_ref:&lt;/span&gt;
&lt;span class="s"&gt; - net1&lt;/span&gt;
&lt;span class="s"&gt; no_ssh_tcp_check: true&lt;/span&gt;
&lt;span class="s"&gt; no_ssh_tcp_check_sleep: 30&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is quite a bit of config going on here, so I'll go through some of the most important parts. Many of the configuration options rely on environment variables which are set when you source the OpenStack RC file, just like for Knife. In addition, the following options may need to be customized according to your OpenStack environment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;image_ref: The name of a valid image to use when creating VMs&lt;/li&gt;
&lt;li&gt;username: The username used by the chosen image, in this case "centos"&lt;/li&gt;
&lt;li&gt;flavor_ref: A valid name of a flavor to use when creating VMs&lt;/li&gt;
&lt;li&gt;key_name: Must match the name of your SSH key in OpenStack, here it is set to equal your username&lt;/li&gt;
&lt;li&gt;floating_ip_pool: The name of a valid pool of public IP addresses&lt;/li&gt;
&lt;li&gt;network_ref: A list of existing networks to connect new VMs to&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To determine the correct values for image, flavor and network above, use the command line OpenStack clients. The Glance client can output a list of valid images to choose from:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;glance image-list
+--------------------------------------+------------------------+-----+------+------------+--------+
&lt;span class="p"&gt;|&lt;/span&gt; ID                                   &lt;span class="p"&gt;|&lt;/span&gt; Name     &lt;span class="p"&gt;|&lt;/span&gt; Disk Format &lt;span class="p"&gt;|&lt;/span&gt; Container Format &lt;span class="p"&gt;|&lt;/span&gt; Size &lt;span class="p"&gt;|&lt;/span&gt; Status &lt;span class="p"&gt;|&lt;/span&gt;
+--------------------------------------+------------------------+-----+------+------------+--------+
&lt;span class="p"&gt;|&lt;/span&gt; ee2cc71b-3e2e-4b11-b327-f9cbf73a5694 &lt;span class="p"&gt;|&lt;/span&gt; CentOS &lt;span class="m"&gt;6&lt;/span&gt; GC 14-11-12   &lt;span class="p"&gt;|&lt;/span&gt; raw &lt;span class="p"&gt;|&lt;/span&gt; bare &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;8589934592&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; active &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; b206baa3-3a80-41cf-9850-49021b8bb3c1 &lt;span class="p"&gt;|&lt;/span&gt; CentOS &lt;span class="m"&gt;7&lt;/span&gt; GC 2014-09-16 &lt;span class="p"&gt;|&lt;/span&gt; raw &lt;span class="p"&gt;|&lt;/span&gt; bare &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;8589934592&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; active &lt;span class="p"&gt;|&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Set the image_ref in the Kitchen config to either the ID, the name or a regex matching the name.&lt;/p&gt;
&lt;p&gt;Correspondingly, find the allowed flavors with the Nova client:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;nova flavor-list
+----+-----------+-----------+------+-----------+------+-------+-------------+-----------+
&lt;span class="p"&gt;|&lt;/span&gt; ID &lt;span class="p"&gt;|&lt;/span&gt; Name      &lt;span class="p"&gt;|&lt;/span&gt; Memory_MB &lt;span class="p"&gt;|&lt;/span&gt; Disk &lt;span class="p"&gt;|&lt;/span&gt; Ephemeral &lt;span class="p"&gt;|&lt;/span&gt; Swap &lt;span class="p"&gt;|&lt;/span&gt; VCPUs &lt;span class="p"&gt;|&lt;/span&gt; RXTX_Factor &lt;span class="p"&gt;|&lt;/span&gt; Is_Public &lt;span class="p"&gt;|&lt;/span&gt;
+----+-----------+-----------+------+-----------+------+-------+-------------+-----------+
&lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; m1.small  &lt;span class="p"&gt;|&lt;/span&gt;    &lt;span class="m"&gt;2048&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="m"&gt;20&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="m"&gt;1&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;     1.0     &lt;span class="p"&gt;|&lt;/span&gt;    True   &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; m1.medium &lt;span class="p"&gt;|&lt;/span&gt;    &lt;span class="m"&gt;4096&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="m"&gt;40&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="m"&gt;2&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;     1.0     &lt;span class="p"&gt;|&lt;/span&gt;    True   &lt;span class="p"&gt;|&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The network names are available using the neutron client. However, if you haven't created any networks yet, you can create a network, subnet and router like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;neutron net-create net1
neutron subnet-create --name subnet1 net1 10.0.0.0/24
neutron router-create gw
neutron router-gateway-set gw public
neutron router-interface-add gw subnet1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These commands assume that the external network in your OpenStack cluster is named "public". Assuming the commands complete successfully you may use the network name "net1" in the Kitchen config file. To get the list of available networks, use the Neutron client with the net-list subcommand:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;neutron net-list
+--------------------------------------+--------+----------------------------------------------------+
&lt;span class="p"&gt;|&lt;/span&gt; id                                   &lt;span class="p"&gt;|&lt;/span&gt; name   &lt;span class="p"&gt;|&lt;/span&gt; subnets &lt;span class="p"&gt;|&lt;/span&gt;
+--------------------------------------+--------+----------------------------------------------------+
&lt;span class="p"&gt;|&lt;/span&gt; 2d2b2336-d7b6-4adc-b7f2-c92f98d4ec58 &lt;span class="p"&gt;|&lt;/span&gt; public &lt;span class="p"&gt;|&lt;/span&gt; 5ac43f4f-476f-4513-8f6b-67a758aa56e7 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; e9dcbda9-cded-4823-a9fe-b03aadf33346 &lt;span class="p"&gt;|&lt;/span&gt; net1   &lt;span class="p"&gt;|&lt;/span&gt; 8ba65517-9bf5-46cc-a392-03a0708cd7f3 10.0.0.0/24 &lt;span class="p"&gt;|&lt;/span&gt;
+--------------------------------------+--------+----------------------------------------------------+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With all that configured, Kitchen is ready to use OpenStack as the driver instead of Vagrant. All you need to do in a cookbook to make Kitchen use the OpenStack driver, is to change the "driver" statement in the ".kitchen.yml" config file in the cookbook root directory from "vagrant" to "openstack":&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;---
driver:
 name: openstack
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, lets take it for a spin:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kitchen create
-----&amp;gt; Starting Kitchen &lt;span class="o"&gt;(&lt;/span&gt;v1.2.1&lt;span class="o"&gt;)&lt;/span&gt;
-----&amp;gt; Creating &amp;lt;default-ubuntu-1404&amp;gt;...
 OpenStack instance &amp;lt;c08688f6-a754-4f43-a365-898a38fc06f8&amp;gt; created.
.........................
&lt;span class="o"&gt;(&lt;/span&gt;server ready&lt;span class="o"&gt;)&lt;/span&gt;
 Attaching floating IP from &amp;lt;public&amp;gt; pool
 Attaching floating IP &amp;lt;10.0.1.243&amp;gt;
 Waiting &lt;span class="k"&gt;for&lt;/span&gt; 10.0.1.243:22...
 Waiting &lt;span class="k"&gt;for&lt;/span&gt; 10.0.1.243:22...
 Waiting &lt;span class="k"&gt;for&lt;/span&gt; 10.0.1.243:22...
 &lt;span class="o"&gt;(&lt;/span&gt;ssh ready&lt;span class="o"&gt;)&lt;/span&gt;
 Using OpenStack keypair &amp;lt;arnes&amp;gt;
 Using public SSH key &amp;lt;~/.ssh/id_rsa.pub&amp;gt;
 Using private SSH key &amp;lt;~/.ssh/id_rsa&amp;gt;
 Adding OpenStack hint &lt;span class="k"&gt;for&lt;/span&gt; ohai
net.ssh.transport.server_version&lt;span class="o"&gt;[&lt;/span&gt;3fe8926c1320&lt;span class="o"&gt;]&lt;/span&gt;
net.ssh.transport.algorithms&lt;span class="o"&gt;[&lt;/span&gt;3fe8926c06b4&lt;span class="o"&gt;]&lt;/span&gt;
net.ssh.connection.session&lt;span class="o"&gt;[&lt;/span&gt;3fe89270b420&lt;span class="o"&gt;]&lt;/span&gt;
net.ssh.connection.channel&lt;span class="o"&gt;[&lt;/span&gt;3fe89270b2cc&lt;span class="o"&gt;]&lt;/span&gt;
Finished creating &amp;lt;default-ubuntu-1404&amp;gt; &lt;span class="o"&gt;(&lt;/span&gt;0m50.68s&lt;span class="o"&gt;)&lt;/span&gt;.
-----&amp;gt; Kitchen is finished. &lt;span class="o"&gt;(&lt;/span&gt;0m52.22s&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Voil&amp;agrave; :)&lt;/p&gt;</summary><category term="knife"></category><category term="kitchen"></category><category term="openstack"></category><category term="chef"></category><category term="nova"></category><category term="neutron"></category><category term="glance"></category><category term="tools"></category><category term="howto"></category></entry><entry><title>Kodeklubben</title><link href="/posts/2015/02/kodeklubben.html" rel="alternate"></link><updated>2015-02-20T00:00:00+01:00</updated><author><name>martin.l.satra@met.no</name></author><id>tag:,2015-02-20:posts/2015/02/kodeklubben.html</id><summary type="html">&lt;p&gt;Her finner du presentasjoner og kodeeksempler fra &lt;a href="http://www.kidsakoder.no/kodeklubben/"&gt;Kodeklubben&lt;/a&gt; sitt besøk på Meteorologisk institutt (MET) 18. februar 2015. Vi demonstrerer bruk av &lt;a href="http://api.met.no"&gt;http://api.met.no&lt;/a&gt; og kart-tjenestene til MET for bruk i egne kodeprosjekt.&lt;/p&gt;
&lt;h2&gt;IPython Notebook&lt;/h2&gt;
&lt;p&gt;Du må ha IPython Notebook installert for å kunne jobbe videre på Notebook-en vi laget på tirsdag. Se "Install" på &lt;a href="http://ipython.org/"&gt;http://ipython.org&lt;/a&gt; for informasjon om hvordan IPython Notebook kan installeres på forskjellige plattformer.&lt;/p&gt;
&lt;h2&gt;Presentasjoner og kodeeksempler&lt;/h2&gt;
&lt;p&gt;Her finner du alle presentasjoner og kodeeksempler vi gikk igjennom:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="/files/itut/met_kodeklubben.pdf"&gt;Presentasjon av MET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nbviewer.ipython.org/gist/anonymous/bf417150abe1f7dca2c3"&gt;IPython Notebook-en med blant annet eksempler på bruk av http://api.met.no&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/files/itut/kodeklubben.tgz"&gt;Presentasjon og kodeeksempler på bruk av kart-tjenestene til MET&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary><category term="visit"></category><category term="code"></category><category term="examples"></category><category term="presentations"></category></entry><entry><title>How to Use Cloud-init to Customize New OpenStack VMs</title><link href="/posts/2015/02/use-cloud-init-to-customize-new-openstack-vms.html" rel="alternate"></link><updated>2015-02-05T00:00:00+01:00</updated><author><name>arne.sund@met.no</name></author><id>tag:,2015-02-05:posts/2015/02/use-cloud-init-to-customize-new-openstack-vms.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Originally published on &lt;a href="http://arnesund.com/2015/02/05/how-to-use-cloud-init-to-customize-new-openstack-vms/"&gt;arnesund.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When creating a new instance (VM) on OpenStack with one of the standard &lt;a href="http://cloud-images.ubuntu.com/releases/"&gt;Ubuntu Cloud images&lt;/a&gt;, the next step is typically to install packages and configure applications. Instead of doing that manually every time, OpenStack enables automatic setup of new instances using &lt;a href="http://cloudinit.readthedocs.org/en/latest/"&gt;Cloud-init&lt;/a&gt;. Cloud-init runs on first boot of every new instance and initializes it according to a provided script or config file. The functionality is part of the Ubuntu image and works the same way regardless of the cloud provider used (Amazon, RackSpace, private OpenStack cloud). Cloud-init is also available for &lt;a href="http://cloudinit.readthedocs.org/en/latest/topics/availability.html"&gt;other distributions&lt;/a&gt; as well.&lt;/p&gt;
&lt;h2&gt;Creating a customization script&lt;/h2&gt;
&lt;h3&gt;Standard Bash script&lt;/h3&gt;
&lt;p&gt;Perhaps the easiest way to get started is to create a standard Bash script that Cloud-init runs on first boot. Here is a simple example to get Apache2 up and running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cat &amp;gt; cloudinit.sh &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF&lt;/span&gt;
&lt;span class="s"&gt;&amp;gt; #!/bin/bash&lt;/span&gt;
&lt;span class="s"&gt;&amp;gt; apt-get update&lt;/span&gt;
&lt;span class="s"&gt;&amp;gt; apt-get -y install apache2&lt;/span&gt;
&lt;span class="s"&gt;&amp;gt; a2ensite 000-default&lt;/span&gt;
&lt;span class="s"&gt;&amp;gt; EOF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This small script installs the Apache2 package and enables the default site. Of course, you’d likely need to do more configuration here before enabling the site, like an rsync of web content to document root and enabling TLS.&lt;/p&gt;
&lt;h2&gt;Launch a new web instance&lt;/h2&gt;
&lt;p&gt;Use the nova CLI command to launch an instance named &lt;code&gt;web1&lt;/code&gt; and supply the filename of the customization script with the &lt;code&gt;-–user-data&lt;/code&gt; argument:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nova boot --flavor m1.medium --image &lt;span class="s2"&gt;&amp;quot;Ubuntu CI trusty 2014-09-22&amp;quot;&lt;/span&gt; --key-name arnes --user-data&lt;span class="o"&gt;=&lt;/span&gt;cloudinit.sh web1
+-----------+---------------------+
&lt;span class="p"&gt;|&lt;/span&gt; Property  &lt;span class="p"&gt;|&lt;/span&gt; Value               &lt;span class="p"&gt;|&lt;/span&gt;
+-----------+---------------------+
&lt;span class="p"&gt;|&lt;/span&gt; name      &lt;span class="p"&gt;|&lt;/span&gt; web1                &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; flavor    &lt;span class="p"&gt;|&lt;/span&gt; m1.medium &lt;span class="o"&gt;(&lt;/span&gt;3&lt;span class="o"&gt;)&lt;/span&gt;       &lt;span class="p"&gt;|&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To access the instance from outside the cloud, allocate a new floating IP and associate it with the new instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nova floating-ip-create public
+------------+-----------+----------+--------+
&lt;span class="p"&gt;|&lt;/span&gt; Ip         &lt;span class="p"&gt;|&lt;/span&gt; Server Id &lt;span class="p"&gt;|&lt;/span&gt; Fixed Ip &lt;span class="p"&gt;|&lt;/span&gt; Pool   &lt;span class="p"&gt;|&lt;/span&gt;
+------------+-----------+----------+--------+
&lt;span class="p"&gt;|&lt;/span&gt; 10.99.1.71 &lt;span class="p"&gt;|&lt;/span&gt;           &lt;span class="p"&gt;|&lt;/span&gt; -        &lt;span class="p"&gt;|&lt;/span&gt; public &lt;span class="p"&gt;|&lt;/span&gt;
+------------+-----------+----------+--------+

nova floating-ip-associate web1 10.99.1.71
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Results&lt;/h2&gt;
&lt;p&gt;The new web instance has Apache running right from the start, no manual steps needed:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Apache2 default page" src="/images/apache2-set-up-using-cloudinit.png" /&gt;&lt;/p&gt;
&lt;h3&gt;More Cloud-init options: Cloud-Config syntax&lt;/h3&gt;
&lt;p&gt;Cloud-init can do more than just run bash scripts. Using cloud-config syntax many different actions are possible. The documentation has &lt;a href="http://cloudinit.readthedocs.org/en/latest/topics/examples.html"&gt;many useful examples&lt;/a&gt; of cloud-config syntax to add user accounts, configure mount points, initialize the instance as a Chef/Puppet client and much more.&lt;/p&gt;
&lt;p&gt;For example, the same Apache2 initialization as above can be done with the following cloud-config statements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#cloud-config
packages:
 - apache2
runcmd:
 - [ a2ensite, &amp;quot;000-default&amp;quot; ]
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Including scripts or config files&lt;/h2&gt;
&lt;p&gt;Including a script or config file from an external source is also possible. This can be useful if the config file is under revision control in Git. Including files is easy, just replace the script contents with an include statement and the URL:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#include
https://gist.githubusercontent.com/arnesund/7332e15c5eb9df8c55aa/raw/0bd63296980bb4d8bf33387cfdb2eb60b964490d/cloudinit.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;a href="Simple cloud-config example"&gt;gist&lt;/a&gt; contains the same cloud-config statements as above, so the end result it the same.&lt;/p&gt;
&lt;h2&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;Cloud-init logs messages to &lt;code&gt;/var/log/cloud-init.log&lt;/code&gt; and in my tests even debug level messages were logged. In addition, Cloud-init records all console output from changes it performs to &lt;code&gt;/var/log/cloud-init-output.log&lt;/code&gt;. That makes it easy to catch errors in the initialization scripts, like for instance when I omitted ‘-y’ to apt-get install and package installation failed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;The following NEW packages will be installed:
 apache2 apache2-bin apache2-data libapr1 libaprutil1 libaprutil1-dbd-sqlite3
 libaprutil1-ldap ssl-cert
0 upgraded, 8 newly installed, 0 to remove and 88 not upgraded.
Need to get 1284 kB of archives.
After this operation, 5342 kB of additional disk space will be used.
Do you want to continue? [Y/n] Abort.
/var/lib/cloud/instance/scripts/part-001: line 4: a2ensite: command not found
2015-02-05 09:59:56,943 - util.py[WARNING]: Failed running /var/lib/cloud/instance/scripts/part-001 [127]
2015-02-05 09:59:56,944 - cc_scripts_user.py[WARNING]: Failed to run module scripts-user (scripts in /var/lib/cloud/instance/scripts)
2015-02-05 09:59:56,945 - util.py[WARNING]: Running scripts-user (&amp;lt;module &amp;#39;cloudinit.config.cc_scripts_user&amp;#39; from &amp;#39;/usr/lib/python2.7/dist-packages/cloudinit/config/cc_scripts_user.pyc&amp;#39;&amp;gt;) failed
Cloud-init v. 0.7.5 finished at Thu, 05 Feb 2015 09:59:56 +0000. Datasource DataSourceOpenStack [net,ver=2]. Up 22.14 seconds
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The line "Do you want to continue? [Y/n] Abort." is a clear indicator that apt-get install failed since it expected user input. Most CLI tools can be run without user input by just passing the correct options, like '-y' to apt-get. After correcting that error, the output is as expected:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;The following NEW packages will be installed:
 apache2 apache2-bin apache2-data libapr1 libaprutil1 libaprutil1-dbd-sqlite3
 libaprutil1-ldap ssl-cert
0 upgraded, 8 newly installed, 0 to remove and 88 not upgraded.
Need to get 1284 kB of archives.
After this operation, 5342 kB of additional disk space will be used.
Get:1 http://nova.clouds.archive.ubuntu.com/ubuntu/ trusty/main libapr1 amd64 1.5.0-1 [85.1 kB]
Get:2 http://nova.clouds.archive.ubuntu.com/ubuntu/ trusty/main libaprutil1 amd64 1.5.3-1 [76.4 kB]
...
Cloud-init v. 0.7.5 running &amp;#39;modules:final&amp;#39; at Thu, 05 Feb 2015 12:35:49 +0000. Up 38.42 seconds.
Site 000-default already enabled
Cloud-init v. 0.7.5 finished at Thu, 05 Feb 2015 12:35:49 +0000. Datasource DataSourceOpenStack [net,ver=2]. Up 38.56 seconds
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This also reveals that the command "a2ensite 000-default" is not needed since the default site is enabled already. However, it’s included here as an example of how to run shell commands using cloud-config statements.&lt;/p&gt;
&lt;h2&gt;Testing vs Production&lt;/h2&gt;
&lt;p&gt;Using Cloud-init to get new instances to the desired state is nice when testing and a necessary step when deploying production instances. In a production context, one would probably use Cloud-init to initialize the instance as a Chef or Puppet client. From there, Chef/Puppet takes over the configuration task and will make sure the instance is set up according to the desired role it should fill. Cloud-init makes the initial bootstrapping of the instance easy.&lt;/p&gt;</summary><category term="openstack"></category><category term="cloud-init"></category><category term="bootstrap"></category><category term="nova boot"></category><category term="ubuntu"></category><category term="cloud-config"></category><category term="howto"></category></entry><entry><title>Remove unused kernels</title><link href="/posts/2015/01/remove-kernel.html" rel="alternate"></link><updated>2015-01-20T00:00:00+01:00</updated><author><name>arnulf.heimsbakk@met.no</name></author><id>tag:,2015-01-20:posts/2015/01/remove-kernel.html</id><summary type="html">&lt;p&gt;Removes all but current kernel and headers for freeing up disk space. This is a note for internal use and tested for Ubuntu Precise. Use at your own risk :) &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dpkg-query -f &lt;span class="s1"&gt;&amp;#39;${Package}\n&amp;#39;&lt;/span&gt; -W &lt;span class="p"&gt;|&lt;/span&gt;  egrep &lt;span class="s1"&gt;&amp;#39;linux-(headers|image)-[[:digit:]].*(|-generic)&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep -v &lt;span class="k"&gt;$(&lt;/span&gt;uname -r &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/-generic//&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo xargs apt-get -q -q -yy --purge remove
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Breakdown&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;List all packages.&lt;/li&gt;
&lt;li&gt;Find only linux-image and linux-header packages with version number, not the two main meta packages.&lt;/li&gt;
&lt;li&gt;Remove the linux-image and linux-header for running kernel from the list.&lt;/li&gt;
&lt;li&gt;Purge all listed packages from system without asking any questions.&lt;/li&gt;
&lt;/ol&gt;
&lt;h6&gt;vim: set syn=markdown spell spl=en:&lt;/h6&gt;</summary><category term="bash"></category><category term="oneliner"></category><category term="precise"></category><category term="kernel"></category></entry><entry><title>Vagrant with OpenStack</title><link href="/posts/2015/01/vagrant-openstack.html" rel="alternate"></link><updated>2015-03-12T00:00:00+01:00</updated><author><name>arnulf.heimsbakk@met.no</name></author><id>tag:,2015-01-16:posts/2015/01/vagrant-openstack.html</id><summary type="html">&lt;p&gt;If you want to use &lt;a href="https://www.vagrantup.com"&gt;Vagrant&lt;/a&gt; with &lt;a href="http://www.openstack.org"&gt;OpenStack&lt;/a&gt;, you need to prepare &lt;a href="https://www.vagrantup.com"&gt;Vagrant&lt;/a&gt; with installing the &lt;a href="https://github.com/cloudbau/vagrant-openstack-plugin"&gt;vagrant-openstack-plugin&lt;/a&gt;. I had some problems installing it directly through &lt;code&gt;vagrant plugin install&lt;/code&gt;. I had to clone it from &lt;a href="https://github.com"&gt;Github&lt;/a&gt; and install it manually. &lt;/p&gt;
&lt;h2&gt;One time configuration&lt;/h2&gt;
&lt;h3&gt;Install OpenStack plugin in Vagrant&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install ruby1.9.1 git virtualbox
&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp
&lt;span class="c"&gt;# At writing moment the latest version of Vagrant is the following version.&lt;/span&gt;
wget https://dl.bintray.com/mitchellh/vagrant/vagrant_1.7.2_x86_64.deb
sudo dpkg -i vagrant_1.7.2_x86_64.deb
git clone https://github.com/cloudbau/vagrant-openstack-plugin
&lt;span class="nb"&gt;cd &lt;/span&gt;vagrant-openstack-plugin
gem build vagrant-openstack-plugin.gemspec
vagrant plugin install vagrant-openstack-plugin-*.gem
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add a dummy box to &lt;a href="https://www.vagrantup.com"&gt;Vagrant&lt;/a&gt; thats needed by the plugin.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vagrant box add dummy https://github.com/cloudbau/vagrant-openstack-plugin/raw/master/dummy.box
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Download OpenStack RC file&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Log into OpenStack&lt;/li&gt;
&lt;li&gt;Download OpenStack API RC file&lt;/li&gt;
&lt;li&gt;Go to &lt;code&gt;Project&lt;/code&gt; -&amp;gt; &lt;code&gt;Compute&lt;/code&gt; -&amp;gt; &lt;code&gt;Access &amp;amp; Security&lt;/code&gt; -&amp;gt; &lt;code&gt;API Access&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Down RC file by hitting &lt;code&gt;Download OpenStack RC File&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Put &lt;code&gt;$USER-openrc.sh&lt;/code&gt; in your &lt;code&gt;~/&lt;/code&gt; or somewhere you prefer&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Configure a Vagrant VM&lt;/h2&gt;
&lt;h3&gt;Vagrantfile&lt;/h3&gt;
&lt;p&gt;This is a default generic Vagrant file which starts a &lt;code&gt;m1.tiny&lt;/code&gt; flavor image of Ubuntu Utopic. It requires that you already have added your ssh key to OpenStack. Please add your ssh key with the name &lt;code&gt;$USER_ssh_key&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;vagrant-openstack-plugin&amp;#39;&lt;/span&gt;

&lt;span class="no"&gt;Vagrant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dummy&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;synced_folder&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/vagrant&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;rsync&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;rsync__exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.git/&amp;quot;&lt;/span&gt;

  &lt;span class="c1"&gt;# Make sure the private key from the key pair is provided&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;private_key_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;~/.ssh/id_rsa&amp;quot;&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;provider&lt;/span&gt; &lt;span class="ss"&gt;:openstack&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;OS_USERNAME&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api_key&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;OS_PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flavor&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/m1.tiny/&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Ubuntu CI trusty 2014-09-22&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endpoint&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;OS_AUTH_URL&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/tokens&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keypair_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;OS_USERNAME&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_ssh_key&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssh_username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ubuntu&amp;quot;&lt;/span&gt;

    &lt;span class="c1"&gt;# The tenant have two networks, so need to specify at least one&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;vagrant&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;floating_ip&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:auto&lt;/span&gt; 
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;floating_ip_pool&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;public&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;provision&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;shell&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bootstrap.sh&amp;quot;&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;provision&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;shell&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;inline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class="no"&gt;SCRIPT&lt;/span&gt;
&lt;span class="sh"&gt;    # Set your country code here to get a local repositroy&lt;/span&gt;
&lt;span class="sh"&gt;    CN=&amp;quot;no&amp;quot;&lt;/span&gt;
&lt;span class="sh"&gt;    grep -q repo.met.no /etc/apt/sources.list || sed -i~ &amp;quot;s#nova.clouds.archive.ubuntu.com#$CN.archive.ubuntu.com#g&amp;quot; /etc/apt/sources.list&lt;/span&gt;
&lt;span class="sh"&gt;    apt-get update&lt;/span&gt;
&lt;span class="no"&gt;  SCRIPT&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;myvm&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;bootstrap.sh&lt;/h3&gt;
&lt;p&gt;Create your custom bootstrap file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c"&gt;# Your aditional bootstrap here...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Running Vagrant&lt;/h2&gt;
&lt;p&gt;Remember to source your OpenStack RC file before you run Vagrant up. You need to do that in each shell windows you are going to run Vagrant in.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;source&lt;/span&gt; ~/&lt;span class="nv"&gt;$USER&lt;/span&gt;-openrc.sh
vagrant up --provider openstack
&lt;/pre&gt;&lt;/div&gt;


&lt;h6&gt;vim: set syn=markdown spell spl=en:&lt;/h6&gt;</summary><category term="howto"></category><category term="openstack"></category><category term="vagrant"></category></entry></feed>